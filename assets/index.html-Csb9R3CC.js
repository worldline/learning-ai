import{by as e,bz as t,bA as n,bB as o,bC as i,bD as l}from"./app--wUBWlRr.js";const p={};function r(c,a){const s=i("Mermaid");return l(),t("div",null,[a[0]||(a[0]=n(`<h1 id="genai-for-services" tabindex="-1"><a class="header-anchor" href="#genai-for-services"><span>GenAI for services</span></a></h1><h3 id="notebook-usage" tabindex="-1"><a class="header-anchor" href="#notebook-usage"><span>Notebook usage</span></a></h3><p>You can use <a href="https://colab.research.google.com/" target="_blank" rel="noopener noreferrer">Google Colab</a> for a simple to use notebook environment for machine learning and data science. It will provide a container with all the necessary libraries and tools to run your code and live editing interface through a browser.</p><p>A notebook is a document that contains live code, equations, visualizations, and narrative text. You can use Colab to create, share, and collaborate on Jupyter notebooks with others.</p><p>With a notebooks you can :</p><ul><li>Prototype your ideas</li><li>easily share your work with others</li><li>collaborate with others</li></ul><div class="hint-container tip"><p class="hint-container-title">User interaction with Colab</p><p>You can store your API keys safely in the <code>userdata</code> of your Colab environment. Also you can upload files to your Colab environment as follows:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">from</span> google<span class="token punctuation">.</span>colab <span class="token keyword">import</span> files</span>
<span class="line"><span class="token keyword">from</span> google<span class="token punctuation">.</span>colab <span class="token keyword">import</span> userdata  <span class="token comment"># For retrieving API keys</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 1. Upload the file to your current colab environment ( a upload button will appear at the execution of the code)</span></span>
<span class="line">uploaded <span class="token operator">=</span> files<span class="token punctuation">.</span>upload<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> fn <span class="token keyword">in</span> uploaded<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;User uploaded file &quot;{name}&quot; with length {length} bytes&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span></span>
<span class="line">        name<span class="token operator">=</span>fn<span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>uploaded<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># get the API key from colab userdata ( left panel of colla, picto with the key)</span></span>
<span class="line">api_key<span class="token operator">=</span>userdata<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;API_KEY&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="dialog-with-llms-rest-apis-mistral" tabindex="-1"><a class="header-anchor" href="#dialog-with-llms-rest-apis-mistral"><span>Dialog with LLMs REST APIs (Mistral)</span></a></h2><div class="hint-container tip"><p class="hint-container-title">configuration</p><p><strong>To set Up Your Environment</strong></p><ul><li>Install the necessary packages using pip:<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">pip <span class="token function">install</span> requests langchain langchain_mistralai</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p><strong>To obtain API Keys</strong></p><ul><li>Obtain an API key for the Mistral API <a href="https://console.mistral.ai/api-keys/" target="_blank" rel="noopener noreferrer">here</a> :::</li></ul><h4 id="main-endpoints" tabindex="-1"><a class="header-anchor" href="#main-endpoints"><span>Main endpoints</span></a></h4><table><thead><tr><th>Endpoint</th><th>URL</th><th>Description</th></tr></thead><tbody><tr><td>Models</td><td><a href="https://api.mistral.ai/v1/models" target="_blank" rel="noopener noreferrer">/v1/models</a></td><td>List models that are available with your account.</td></tr><tr><td>Chat Completions</td><td><a href="https://api.mistral.ai/v1/chat/completions" target="_blank" rel="noopener noreferrer">/v1/chat/completions</a></td><td>Completion means that the LLM will generate a response based on the prompt.</td></tr><tr><td>Embeddings</td><td><a href="https://api.mistral.ai/v1/embeddings" target="_blank" rel="noopener noreferrer">/v1/embeddings</a></td><td>Embeddings means that the LLM will generate a vector representation of the input text.</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Authorization: Bearer &lt;your_api_key&gt;&quot;</span> https://api.mistral.ai/v1/models</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>output :</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text-davinci-003&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;object&quot;</span><span class="token operator">:</span> <span class="token string">&quot;model&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;owned_by&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user-123456789&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;permission&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user-123456789&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;object&quot;</span><span class="token operator">:</span> <span class="token string">&quot;permission&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;allow_create_engine&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;allow_sampling&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;allow_logprobs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;allow_search&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;allow_view&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;allow_fine_tuning&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;organization&quot;</span><span class="token operator">:</span> <span class="token string">&quot;org-123456789&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;group&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;is_blocking&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  ...</span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="json-mode" tabindex="-1"><a class="header-anchor" href="#json-mode"><span>JSON mode</span></a></h4><p><strong>JSON mode</strong> is a feature that allows you to send structured data to the model through the API instead of a text prompt. To use JSON mode, you need to select the right endpoint in the API explorer and specify the input format as JSON in the prompt.</p><p>For OpenAI API, you can use the following format :</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;model&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text-davinci-003&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;prompt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Translate the following text to French: &#39;Hello, how are you?&#39;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;max_tokens&quot;</span><span class="token operator">:</span> <span class="token number">100</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Authorization: Bearer &lt;your_api_key&gt;&quot;</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;model&quot;: &quot;text-davinci-003&quot;, &quot;prompt&quot;: &quot;Translate the following text to French: &#39;</span>Hello, how are you?<span class="token string">&#39;&quot;, &quot;max_tokens&quot;: 100}&#39;</span> https://api.mistral.ai/v1/chat/completions</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;id&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;chatcmpl-123456789&quot;</span>,</span>
<span class="line">  <span class="token string">&quot;object&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;chat.completion&quot;</span>,</span>
<span class="line">  <span class="token string">&quot;created&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1679341456</span>,</span>
<span class="line">  <span class="token string">&quot;model&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;text-davinci-003&quot;</span>,</span>
<span class="line">  <span class="token string">&quot;choices&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,</span>
<span class="line">      <span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;role&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;assistant&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Bonjour, comment ça va?&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span>,</span>
<span class="line">      <span class="token string">&quot;finish_reason&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;stop&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span>,</span>
<span class="line">  <span class="token string">&quot;usage&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;prompt_tokens&quot;</span><span class="token builtin class-name">:</span> <span class="token number">5</span>,</span>
<span class="line">    <span class="token string">&quot;completion_tokens&quot;</span><span class="token builtin class-name">:</span> <span class="token number">7</span>,</span>
<span class="line">    <span class="token string">&quot;total_tokens&quot;</span><span class="token builtin class-name">:</span> <span class="token number">12</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="structured-outputs" tabindex="-1"><a class="header-anchor" href="#structured-outputs"><span>Structured Outputs</span></a></h4><p><code>Structured outputs</code> are a feature that allows you to receive structured data from the model through the API. It is useful for working with models that require structured outputs, such as JSON.</p><p>To use structured outputs, you need to select the right endpoint in the API explorer and specify the output format in the prompt.</p><p>for OpenAI API, you can use the following format :</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;model&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text-davinci-003&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;prompt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Translate the following text to French: &#39;Hello, how are you?&#39;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;max_tokens&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>the structured output can be as follow :</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code class="language-json"><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;model&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text-davinci-003&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;prompt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Translate the following text to French: &#39;Hello, how are you?&#39;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;max_tokens&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bonjour, comment ça va?&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🧪-exercises" tabindex="-1"><a class="header-anchor" href="#🧪-exercises"><span>🧪 Exercises</span></a></h2><h4 id="request-an-llm-with-with-basic-rest-request" tabindex="-1"><a class="header-anchor" href="#request-an-llm-with-with-basic-rest-request"><span>Request an LLM with with basic REST request</span></a></h4><p>Create a Python application that generates humorous motivational quotes for developers based on their name, favorite programming language, and a brief description of their current project or challenge.</p><div class="hint-container tip"><p class="hint-container-title">Library for making API calls</p><p>You can use <a href="https://requests.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer">requests</a> for making API calls in Python.</p></div></div><p><strong>Expected Output</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">Enter your name: Ibrahim</span>
<span class="line">Enter your favorite programming language: kotlin</span>
<span class="line">Enter your current project description: conference app with KMP</span>
<span class="line"></span>
<span class="line">--- Motivational Quote ---</span>
<span class="line">Quote: <span class="token string">&quot;Code like you just ate a burrito... with passion, speed, and a little bit of mess!&quot;</span></span>
<span class="line">Author: Unknown</span>
<span class="line">--------------------------</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://docs.mistral.ai/api/#tag/models/operation/list_models_v1_models_get" target="_blank" rel="noopener noreferrer">API Model list</a></li><li><a href="https://docs.mistral.ai/api/#tag/chat/operation/chat_completion_v1_chat_completions_post" target="_blank" rel="noopener noreferrer">Chat completions</a></li></ul><details class="hint-container details"><summary>Solution</summary><p><a href="https://colab.research.google.com/drive/1rE_jC4DhD33Ni8MR9YTGK9WhykOTtbcF?usp=sharing" target="_blank" rel="noopener noreferrer">Google Collab notebook</a></p></details><h2 id="context-aware-frameworks-langchain" tabindex="-1"><a class="header-anchor" href="#context-aware-frameworks-langchain"><span>Context aware frameworks (LangChain)</span></a></h2><p>LangChain is a framework for building applications powered by language models (LLMs) like OpenAI&#39;s GPT-3. It provides a set of tools and utilities for working with LLMs, including prompt engineering, chain of thought, and memory management. LangChain is designed to be modular and extensible, allowing developers to easily integrate with different LLMs and other AI services. Finally it enables to build agents and complex workflows on top of LLMs.</p><h4 id="llm-supports" tabindex="-1"><a class="header-anchor" href="#llm-supports"><span>LLM supports</span></a></h4><p>Depending on the LLM, LangChain provides different APIs. Have a look at the following table <a href="https://python.langchain.com/docs/integrations/chat/" target="_blank" rel="noopener noreferrer">here</a> to see which APIs are available for your LLM.</p><p>Mistral AI Chat Model is supported by LangChain and provides the following features:</p><table><thead><tr><th>Model Features</th><th>Tool Calling</th><th>Structured Output</th><th>JSON Mode</th><th>Image Input</th><th>Audio Input</th><th>Video Input</th></tr></thead><tbody><tr><td></td><td>✅</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td><td>❌</td></tr></tbody></table><p>To use langchain with mistral, you need to install the <code>langchain_mistralai</code> package and create a <code>ChatMistralAI</code> object.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">from</span> langchain_mistralai<span class="token punctuation">.</span>chat_models <span class="token keyword">import</span> ChatMistralAI</span>
<span class="line"><span class="token comment"># Define your API key and model</span></span>
<span class="line">API_KEY <span class="token operator">=</span> <span class="token string">&#39;your_api_key&#39;</span>  <span class="token comment"># Replace with your actual Mistral API key</span></span>
<span class="line">MISTRAL_API_URL <span class="token operator">=</span> <span class="token string">&#39;https://api.mistral.ai/v1/chat/completions&#39;</span></span>
<span class="line">llm <span class="token operator">=</span> ChatMistralAI<span class="token punctuation">(</span>api_key<span class="token operator">=</span>API_KEY<span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">&quot;open-mistral-7b&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prompt-templating" tabindex="-1"><a class="header-anchor" href="#prompt-templating"><span>Prompt templating</span></a></h4><p><a href="https://python.langchain.com/api_reference/core/prompts/langchain_core.prompts.prompt.PromptTemplate.html#prompttemplate" target="_blank" rel="noopener noreferrer"><code>Prompt templating</code></a> is a powerful feature that allows you to create dynamic prompts based on the input data. It enables you to generate prompts that are tailored to the specific requirements of your application.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">from</span> langchain<span class="token punctuation">.</span>prompts <span class="token keyword">import</span> PromptTemplate</span>
<span class="line"></span>
<span class="line">prompt <span class="token operator">=</span> PromptTemplate<span class="token punctuation">(</span></span>
<span class="line">    input_variables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;text&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;language&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    template<span class="token operator">=</span><span class="token string">&quot;translate the following text to {language}: {text}&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="chaining" tabindex="-1"><a class="header-anchor" href="#chaining"><span>Chaining</span></a></h4><p><a href="https://python.langchain.com/v0.1/docs/modules/chains/" target="_blank" rel="noopener noreferrer"><code>Chain</code></a> Chains refer to sequences of calls - whether to an LLM, a tool, or a data pre-processing step. It is a sequence of calls that are executed in order, with the output of one call being the input for the next call.It enables you to create complex workflows by combining the output of one LLM call with the input of another. This is useful for tasks that require multiple steps or interactions with external systems.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">from</span> langchain<span class="token punctuation">.</span>chains <span class="token keyword">import</span> LLMChain</span>
<span class="line"></span>
<span class="line">input_data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;text&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello, how are you?&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;language&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;French&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">chain <span class="token operator">=</span> prompt <span class="token operator">|</span> llm_model</span>
<span class="line">response<span class="token operator">=</span>chain<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span>input_data<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Multiple prompt can be chained together to create complex workflows.</p><h4 id="aimessage" tabindex="-1"><a class="header-anchor" href="#aimessage"><span>AIMessage</span></a></h4><p><a href="https://api.python.langchain.com/en/latest/messages/langchain_core.messages.ai.AIMessage.html" target="_blank" rel="noopener noreferrer">AIMessage</a> is returned from a chat model as a response to a prompt. It contains the message type, content, and any additional parameters.</p><h4 id="tool-function-calling" tabindex="-1"><a class="header-anchor" href="#tool-function-calling"><span>Tool/Function calling</span></a></h4><p><a href="https://python.langchain.com/docs/how_to/tool_calling/" target="_blank" rel="noopener noreferrer"><code>Function/Tool calling</code></a> is a feature that allows the llm to call existing functions from your code. It is useful for working with functions, such as APIs, and for interacting with models that require function calls. Once a tool function is created, you can register it as a tool within LangChain for being used by the LLM.</p><h2 id="rag-for-services-llama-index" tabindex="-1"><a class="header-anchor" href="#rag-for-services-llama-index"><span>RAG for services (llama-index)</span></a></h2><p><a href="https://docs.llamaindex.ai/en/stable/use_cases/q_and_a/" target="_blank" rel="noopener noreferrer"><strong>llama-index</strong></a> is a powerful tool for building and deploying RAG (Retrieval Augmented Generation) applications. It provides a simple and efficient way to integrate LLMs into your applications, allowing you to retrieve relevant information from a large knowledge base and use it to generate responses. RAG is a technique that leverages the power of LLMs to augment human-generated content.</p><h3 id="rag-over-unstructured-documents" tabindex="-1"><a class="header-anchor" href="#rag-over-unstructured-documents"><span>RAG over Unstructured Documents</span></a></h3><p>Unstructured documents are a common source of information for RAG applications. These documents can be in various formats, such as text, PDF, HTML, or images. LlamaIndex provides tools for indexing and querying unstructured documents, enabling you to build powerful RAG applications that can retrieve information from a large corpus of documents.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">documents <span class="token operator">=</span> SimpleDirectoryReader<span class="token punctuation">(</span>input_files<span class="token operator">=</span><span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">index <span class="token operator">=</span> SummaryIndex<span class="token punctuation">.</span>from_documents<span class="token punctuation">(</span>documents<span class="token punctuation">,</span> settings<span class="token operator">=</span>settings<span class="token punctuation">)</span></span>
<span class="line">query_engine <span class="token operator">=</span> index<span class="token punctuation">.</span>as_query_engine<span class="token punctuation">(</span>response_mode<span class="token operator">=</span><span class="token string">&quot;tree_summarize&quot;</span><span class="token punctuation">,</span> llm<span class="token operator">=</span>llm<span class="token punctuation">)</span></span>
<span class="line">response <span class="token operator">=</span> query_engine<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">&quot;&lt;your_query_here&gt;&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="question-answering-qa-over-structured-data-mysql" tabindex="-1"><a class="header-anchor" href="#question-answering-qa-over-structured-data-mysql"><span>Question Answering (QA) over Structured Data (MySQL)</span></a></h3><p>Structured Data is another common source of information for RAG applications. This data is typically stored in databases or spreadsheets and can be queried using SQL or other query languages. LlamaIndex provides tools for connecting LLMs to databases and querying structured data, allowing you to build RAG applications that can retrieve information from databases.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token comment">#The database library used in this example is SQLAlchemy</span></span>
<span class="line">sql_database <span class="token operator">=</span> SQLDatabase<span class="token punctuation">(</span>engine<span class="token punctuation">,</span> include_tables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;books&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">query_engine <span class="token operator">=</span> NLSQLTableQueryEngine<span class="token punctuation">(</span></span>
<span class="line">    sql_database<span class="token operator">=</span>sql_database<span class="token punctuation">,</span></span>
<span class="line">    tables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;books&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    llm<span class="token operator">=</span>llm<span class="token punctuation">,</span></span>
<span class="line">    embed_model<span class="token operator">=</span>embed_model<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">query_engine<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">&quot;Who wrote &#39;To Kill a Mockingbird&#39;?&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🧪-exercise" tabindex="-1"><a class="header-anchor" href="#🧪-exercise"><span>🧪 Exercise</span></a></h2><h4 id="exercice-1-request-an-llm-with-langchain" tabindex="-1"><a class="header-anchor" href="#exercice-1-request-an-llm-with-langchain"><span>Exercice 1 - Request an LLM with langchain</span></a></h4><p>Create a Python application that generates humorous motivational quotes for developers based on their name, favorite programming language, and a brief description of their current project or challenge.</p><p><strong>Expected Output</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">Enter your name: Ibrahim</span>
<span class="line">Enter your favorite programming language: kotlin</span>
<span class="line">Enter your current project description: conference app with KMP</span>
<span class="line"></span>
<span class="line">--- Motivational Quote ---</span>
<span class="line">Quote: <span class="token string">&quot;Code like you just ate a burrito... with passion, speed, and a little bit of mess!&quot;</span></span>
<span class="line">Author: Unknown</span>
<span class="line">--------------------------</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Steps</strong></p><p>Create a function <code>get_developer_motivation(name, language, project_description)</code> that:</p><ul><li>Takes a developer&#39;s name, their favorite programming language, and a brief description of their current project or challenge as input.</li><li>Uses LangChain to send a request to the LLM to generate a humorous motivational quote.</li><li>Returns a structured response containing the quote, the developer&#39;s name, the programming language, and the project description.</li></ul><details class="hint-container details"><summary>Solution</summary><p><a href="https://colab.research.google.com/drive/1oGPjmOlYPwTq19HGpY8PFhsX8OuwPK22?usp=sharing" target="_blank" rel="noopener noreferrer">Google Colab notebook</a></p></details><h4 id="exercice-1-1-use-langchain-to-request-mistral-ai-api-embedding-endpoint-to-get-the-embedding-of-a-text-prompt" tabindex="-1"><a class="header-anchor" href="#exercice-1-1-use-langchain-to-request-mistral-ai-api-embedding-endpoint-to-get-the-embedding-of-a-text-prompt"><span>Exercice 1.1 - Use langchain to request Mistral AI API embedding endpoint to get the embedding of a text prompt</span></a></h4><details class="hint-container details"><summary>Solution</summary><p><a href="https://colab.research.google.com/drive/1oGPjmOlYPwTq19HGpY8PFhsX8OuwPK22?usp=sharing" target="_blank" rel="noopener noreferrer">Google Colab notebook</a></p></details><h4 id="exercice-1-2-let-s-use-chaining-to-create-a-chain-that-compares-the-embeddings" tabindex="-1"><a class="header-anchor" href="#exercice-1-2-let-s-use-chaining-to-create-a-chain-that-compares-the-embeddings"><span>Exercice 1.2 - Let&#39;s use chaining to create a chain that compares the embeddings.</span></a></h4><p>You have a json file with a list of FAQ questions and answers. Let&#39;s request the Mistral AI API to get the embedding of a question and compare it with the embeddings of the FAQ questions to find the most similar one. Then return the question of the FAQ that is the most similar to the question asked to get the final answer from the LLM.</p><p>Here is the schema :</p>`,54)),o(s,{value:`
flowchart TD
A[JSON FAQs
Questions & Answers] --> B[Convert to List]
B --> C[LLM Embedding
Request]
C --> D((FAQ
Embedding))
E[User Prompt
Can I get refund?] --> F[LLM Embedding
Request]
F --> G((User
Embedding))
D --> H[Cosine
Comparison]
G --> H
H --> I((Closest FAQ
Match))
I --> J[LLM Final
Response]
classDef default fill:#e1f5fe,stroke:#01579b,stroke-width:2px,color:#000
classDef circle fill:#bbdefb,stroke:#1565c0,stroke-width:2px,color:#000
class D,G,I circle
`}),a[1]||(a[1]=n(`<details class="hint-container details"><summary>Solution</summary><p><a href="https://colab.research.google.com/drive/1vcAbbjEuADzLKo9xxwXu6QY8f1-Vnz4L?usp=sharing" target="_blank" rel="noopener noreferrer">Google Colab notebook</a></p></details><h4 id="exercice-2-tool-function-calling-request-an-llm-with-tool-function-calling" tabindex="-1"><a class="header-anchor" href="#exercice-2-tool-function-calling-request-an-llm-with-tool-function-calling"><span>Exercice 2 - Tool/Function calling : Request an LLM with Tool/Function calling</span></a></h4><p>Build a command-line application that fetches weather data for a specified city using LangChain and a public weather API. The application will utilize implicit tool calling to allow the LLM to decide when to call the weather-fetching tool based on user input.</p><h5 id="output" tabindex="-1"><a class="header-anchor" href="#output"><span>Output</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">Ask about the weather <span class="token punctuation">(</span>e.g., <span class="token string">&#39;Lille, France&#39;</span><span class="token punctuation">)</span>: Paris</span>
<span class="line"></span>
<span class="line">------------------------------------------------------------------------------</span>
<span class="line">The current weather <span class="token keyword">in</span> Paris is: overcast clouds with a temperature of <span class="token number">6.63</span>°C.</span>
<span class="line">------------------------------------------------------------------------------</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Configuration</p><ul><li>Sign up for an API key from a weather service provider (e.g., OpenWeatherMap). - You can generate your key <a href="https://home.openweathermap.org/api_keys" target="_blank" rel="noopener noreferrer">here</a> - You can call the API as following : <code>bash curl https://api.openweathermap.org/data/2.5/weather?q=Lille&amp;appid=&lt;your_api_key&gt;&amp;units=metric </code></li></ul></div><h5 id="steps" tabindex="-1"><a class="header-anchor" href="#steps"><span>Steps</span></a></h5><p><strong>Create the Weather Fetching Function</strong></p><ul><li>Define a function <code>fetch_weather(city: str) -&gt; dict</code> that takes a city name as input and returns the weather data as a dictionary. Use the weather API to fetch the data.</li></ul><p><strong>Register the Weather Tool</strong></p><ul><li>Use the <a href="https://python.langchain.com/docs/concepts/tools/" target="_blank" rel="noopener noreferrer"><code>Tool</code></a> class from LangChain to register the <code>fetch_weather</code> function as a tool.</li></ul><p><strong>Set Up the LangChain Components</strong></p><ul><li>Create a prompt template that asks about the weather in a specified city.</li><li>Instantiate the <code>ChatMistralAI</code> model with your Mistral API key.</li><li>Create a chain that combines the prompt template, the chat model, and the registered weather tool.</li></ul><p><strong>Handle User Input</strong></p><ul><li>Implement a function <code>handle_user_input(city)</code> that: <ul><li>Takes user input for the city name.</li><li>Invokes the chain with the input data.</li><li>Checks if the response includes <a href="https://python.langchain.com/docs/how_to/tool_calling/" target="_blank" rel="noopener noreferrer"><code>tool calls</code></a>.</li><li>Extracts the function name and arguments from the tool call and invokes the weather tool if necessary.</li><li>Returns the weather information or the LLM&#39;s response.</li></ul></li></ul><p><strong>Run the Application</strong></p><ul><li>Prompt the user to enter a city name.</li><li>Call the <code>handle_user_input</code> function with the provided city name and display the result.</li></ul><details class="hint-container details"><summary>Solution</summary><p><a href="https://colab.research.google.com/drive/16B84XU5dl2UR5XZkRtnh3MWUK0K5ZBd_?usp=sharing" target="_blank" rel="noopener noreferrer">Google Collab notebook</a></p></details><h4 id="exercice-3-rag-querying-on-unstructured-documents" tabindex="-1"><a class="header-anchor" href="#exercice-3-rag-querying-on-unstructured-documents"><span>Exercice 3 - RAG : Querying on Unstructured Documents</span></a></h4><p>Create a Python application that provide a txt document containings a list of application comments and make sentiment analysis on it with <code>llama-index</code>.</p><p>Your customer review txt file :</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Review 1: I was very disappointed with the product. It did not meet my expectations.</span>
<span class="line">Review 2: The service was excellent! I highly recommend this company.</span>
<span class="line">Review 3: I had a terrible experience. The product was faulty, and the customer support was unhelpful.</span>
<span class="line">Review 4: I am extremely satisfied with my purchase. The quality is outstanding.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Expected Shell Output:</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">Saving customer_reviews.txt to customer_reviews <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>.txt</span>
<span class="line">User uploaded <span class="token function">file</span> <span class="token string">&quot;customer_reviews (4).txt&quot;</span> with length <span class="token number">338</span> bytes</span>
<span class="line">The customers&#39; experiences with the company and its products vary. Some have had positive experiences, such as excellent <span class="token function">service</span> and high-quality products, <span class="token keyword">while</span> others have encountered issues with faulty products and unhelpful customer support.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Solution</summary><p><a href="https://colab.research.google.com/drive/1HRVqcYEl2RLQDQ8l4NoGcdxiqU-6CgJa?usp=sharing" target="_blank" rel="noopener noreferrer">Google Collab notebook</a></p></details><h5 id="exercice-4-rag-querying-sql-databases-with-natural-language" tabindex="-1"><a class="header-anchor" href="#exercice-4-rag-querying-sql-databases-with-natural-language"><span>Exercice 4 - RAG : Querying SQL Databases with Natural Language</span></a></h5><p>Create a Python application that initializes a list of languages and their creators with <code>sqlalchemy</code> and requests the LLM to retrieve the creators of a language. The LLM should be able to understand the context and retrieve the relevant information from the database.</p><p><strong>Expected Shell Output:</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;language_name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Python&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;creator&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Guido van Rossum&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;year_created&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1991</span></span>
<span class="line">    <span class="token punctuation">}</span>,</span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;language_name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;JavaScript&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;creator&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Brendan Eich&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;year_created&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1995</span></span>
<span class="line">    <span class="token punctuation">}</span>,</span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;language_name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Java&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;creator&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;James Gosling&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;year_created&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1995</span></span>
<span class="line">    <span class="token punctuation">}</span>,</span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;language_name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;C++&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;creator&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Bjarne Stroustrup&quot;</span>,</span>
<span class="line">        <span class="token string">&quot;year_created&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1985</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line">Guido van Rossum created Python <span class="token keyword">in</span> <span class="token number">1991</span>.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Solution</p><p><a href="https://colab.research.google.com/drive/1osoFUAxRbZayftaTlCtJIqlWlj_0c3sQ?usp=sharing" target="_blank" rel="noopener noreferrer">Google Collab notebook</a></p></div><h2 id="vector-databases" tabindex="-1"><a class="header-anchor" href="#vector-databases"><span>(Vector databases )</span></a></h2><h3 id="usage-of-chroma" tabindex="-1"><a class="header-anchor" href="#usage-of-chroma"><span>Usage of Chroma</span></a></h3><p>Chroma is a vector database that allows you to store and query vectors of data. Lanchain provides a simple and efficient way to integrate <a href="https://www.trychroma.com/" target="_blank" rel="noopener noreferrer">Chroma</a> into your applications, allowing you to store and query vectors of data using LLMs.</p><p>Please refer to the <a href="https://python.langchain.com/v0.1/docs/modules/data_connection/vectorstores/" target="_blank" rel="noopener noreferrer">Langchain vector documentation</a> for more information on how to use Chroma.</p><h2 id="📖-further-readings" tabindex="-1"><a class="header-anchor" href="#📖-further-readings"><span>📖 Further readings</span></a></h2>`,35))])}const d=e(p,[["render",r]]),h=JSON.parse('{"path":"/5.services/","title":"GenAI for services","lang":"en-US","frontmatter":{"description":"GenAI for services Notebook usage You can use Google Colab for a simple to use notebook environment for machine learning and data science. It will provide a container with all t...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GenAI for services\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-16T14:55:21.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://worldline.github.io/learning-ai/learning-ai/5.services/"}],["meta",{"property":"og:title","content":"GenAI for services"}],["meta",{"property":"og:description","content":"GenAI for services Notebook usage You can use Google Colab for a simple to use notebook environment for machine learning and data science. It will provide a container with all t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-07-16T14:55:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T14:55:21.000Z"}]]},"git":{"updatedTime":1752677721000,"contributors":[{"name":"Ibrahim Gharbi","username":"","email":"brah.gharbi@gmail.com","commits":4},{"name":"Brah","username":"Brah","email":"brah.gharbi@gmail.com","commits":19,"url":"https://github.com/Brah"},{"name":"yostane","username":"yostane","email":"1958676+yostane@users.noreply.github.com","commits":3,"url":"https://github.com/yostane"}],"changelog":[{"hash":"a549ea1e43467b2b45356b8fa6baff8e93550ef4","time":1752677721000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update with mermaid diagrams config"},{"hash":"9fc2db54f8dcca2ada8cf629b3fb339a254c6c7c","time":1752572850000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update"},{"hash":"c8a7c16a236e14a4b33bca68e2b49f7c7f266d03","time":1751633632000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update some titles, added mcp practical work"},{"hash":"2d799747dfdf2759b2ebec625c433d5738895409","time":1751625745000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update structure ased on feedback, added practical work"},{"hash":"daa46b8ea854bc5ff5ed60cc6fa5b8bf91440a71","time":1748338349000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update"},{"hash":"6daeafbc0530dff67eb19507a19bae28f6223873","time":1748333086000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update"},{"hash":"9e8a28fb59b15036faeb3e13c4c5ae372018b7c4","time":1736930886000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update"},{"hash":"262ae761da85fd3a6dcacf446e44911fd0356dab","time":1735054767000,"email":"1958676+yostane@users.noreply.github.com","author":"yostane","message":"fix: update terminology from GCP to Google Cloud for clarity in README.md"},{"hash":"8f4473b0aa4904a1593e5751fad71b76093f9ab6","time":1735054696000,"email":"1958676+yostane@users.noreply.github.com","author":"yostane","message":"fix: correct terminology and improve clarity in README.md"},{"hash":"ad9472a17c84a210c135d8d16f222ab36173e4ae","time":1735054564000,"email":"1958676+yostane@users.noreply.github.com","author":"yostane","message":"update dependencies and improve project configuration"},{"hash":"81d99ac948cf2d64e203cd07871950a39a499120","time":1734031812000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update"},{"hash":"29e381696ce4927e5236c175a879fa65ebfab908","time":1734013333000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update with minor changes"},{"hash":"e489b938352cd7f202f5fe9e47d37651dd51ca55","time":1734012507000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update with unstructured RAG theorical part"},{"hash":"e2139a229d09c49b11a327ba355673ce487ce515","time":1734011905000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"updated with rag unstructured exercise"},{"hash":"0c725cff2b8783d0a18252238d0f7f13a56f0b81","time":1734007943000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update with RAG exercises and Copilot theorical part"},{"hash":"214f1646baa95023eb3c5739238d08f08cbb605d","time":1733781033000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"minor changes"},{"hash":"9e56a72b1dfb9df3fd2cbe54102641b3b75cdfd8","time":1733779487000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"updated with google services refactoring"},{"hash":"b6ad84fe4626f6eff3905862c181caf93c7ecfcd","time":1733777350000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update with more services exercises"},{"hash":"fb5d5ed38dd1322deaaba3339ba7bb04ac9583de","time":1733759929000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"updated with AI for services exercises"},{"hash":"d6df7d06d340576711a5cc25e3161fe6023e443c","time":1732794772000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update with exercises for AI for services"},{"hash":"5d69f8559fe04aab17fa046e9e6e1c301f933164","time":1732110036000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update with prompt techniques"},{"hash":"b0692b48b0492168ddebf087428ca6a41cf3206f","time":1732108523000,"email":"brah.gharbi@gmail.com","author":"Brah","message":"update with exercises and Develop content"},{"hash":"ce225ba85992e6b8542e223d4bbebe0dbeea510b","time":1726762057000,"email":"brah.gharbi@gmail.com","author":"Ibrahim Gharbi","message":"update"},{"hash":"26729e23a2c059b4a65f0e9224bad84f8055815e","time":1726756003000,"email":"brah.gharbi@gmail.com","author":"Ibrahim Gharbi","message":"update"},{"hash":"7aa9e1f9872ec588589b7843938512dc3397e571","time":1726754277000,"email":"brah.gharbi@gmail.com","author":"Ibrahim Gharbi","message":"update titles"},{"hash":"184619433dfc1944f13511283aa99a08eeee94a5","time":1722612010000,"email":"brah.gharbi@gmail.com","author":"Ibrahim Gharbi","message":"initial commit with the complete summary and theorical part 1 drafted"}]},"filePathRelative":"5.services/README.md","autoDesc":true}');export{d as comp,h as data};
